// time webppl priors.wppl --require habutils

var fpath = "/Users/mht/Documents/research/habituals/models/priors/data/"
var priorData = habutils.readCSV(fpath+"prior1.csv")

var df = dataFrame(priorData, ["trial_num", "existence", "nTimes","frequency","logFreq"])

var items = _.uniq(_.pluck(df, "item"))

var existentialModel = function(){

	foreach(items, function(i){
		
		var itemData = subset(df, "item", i)

		// % of Americans question
		var gamma = uniform(0,1)
		var delta = uniform(0,50)

		var scr = sum(map(function(d){
			return betaERP.score([shape_alpha(gamma,delta),
									shape_beta(gamma,delta)], avoidEnds(d))
		}, _.pluck(itemData, "existence")))

		factor(scr)

		query.add(["existence","gamma", i], gamma)
		query.add(["existence","delta", i], delta)

		var predictive = beta(shape_alpha(gamma,delta), shape_beta(gamma,delta))
		query.add(["existence","predictive", i], predictive)
																										
	})
	return query
}


var frequencyModel = function(){

	foreach(items, function(i){
		
		var itemData = subset(df, "item", i)

		// frequency
		var mu = gaussian(0,50)
		var sigma = uniform(0,20)

		var scr = sum(map(function(d){
			return gaussianERP.score([mu, sigma], d)
		}, _.pluck(itemData, "logFreq")))

		factor(scr)

		query.add(["frequency","mu", i], mu)
		query.add(["frequency","sigma", i], sigma)

		var predictive = gaussian(mu, sigma)
		query.add(["frequency","predictive", i], predictive)


	})

	return query
}
var samples = 100000
var burn = samples/2

var existenceERP = IncrementalMH(existentialModel, samples, {burn:burn, verbose:true, verboseLag: samples/100})
console.log("------Existence inference complete------")
var header = "Measure,Parameter,Item,Value"
var outfile1 = "results/existenceQ-betaModel-incrMH" + samples/1000 + "k_burn" + burn/1000 + "k.csv"
habutils.erpWriter(existenceERP, outfile1, header)
console.log("__Written to " + outfile1)

var frequencyERP = IncrementalMH(frequencyModel, samples, {burn:burn, verbose:true, verboseLag: samples/100})
console.log("------Frequency inference complete------")
var outfile2 = "results/frequencyQ-logNormalModel-incrMH" + samples/1000 + "k_burn" + burn/1000 + "k.csv"
habutils.erpWriter(frequencyERP, outfile2, header)
console.log("__Written to " + outfile2)
