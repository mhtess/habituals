// time webppl habituals.wppl --require mht --require tjUtils

var align2afc = {
	"agree-key":"habitual",
	"disagree-key": "mm"
}

var df_tj_wRounded = map(function(x){
	return _.extend(x, {roundedFreq: nearestPriorBin(x.logFreq),
						alignedResponse : align2afc[x.response]})
}, df_tj)


var prior_samples = 10000
var prior_burn = prior_samples/2
var priorERP = IncrementalMH(priorModel, prior_samples, {burn:prior_burn, verbose:true, verboseLag: prior_burn/20})

var priorERPobject = _.object(map(function(i){
	return [i, marginalizeERP(priorERP, i)]
}, items))

var thetaBins = map(function(x) {return x + binWidth/2;}, priorBins);


var model = function(){

	var speaker_optimality = uniform(0,20)
	var phi = uniform(0,1)

	// console.log("so " + speaker_optimality)
	// console.log("phi " + phi)

	foreach(items, function(i){

		var pp = sample(priorERPobject[i]); // prior params.
		var prior = discretizeLogNormalPrior(pp[0], pp[1], pp[2]);
		var itemData = subset(df_tj_wRounded, "habitual", i)
		var freqLevels = _.uniq(_.pluck(itemData, "roundedFreq"))

		foreach(freqLevels, function(f){

			var freqData = subset(itemData, "roundedFreq", f)
			var grossLevel = freqData[0]["time_period"]
			var responseData = _.pluck(freqData, "alignedResponse")
			var s2 = speaker2(f, prior, speaker_optimality, thetaBins)
			var s2_plusGuess = guessingLink(s2, phi)

			var scr = reduce(function(response, memo) {
							    return memo + s2_plusGuess.score([], response)
								}, 0, responseData)

			// console.log(i + f + scr)

			// console.log("S2 prob = " + Math.exp(s2_plusGuess.score([], "habitual")))

			factor(scr)
			query.add(["predictive", i, f, grossLevel], Math.exp(s2_plusGuess.score([], "habitual")))
		})
	})

	query.add(["parameter", "global", "speaker_optimality", "NA"], speaker_optimality)
	query.add(["parameter", "global", "phi", "NA"], phi)
	return query
}

var samples = 50000
var burn = samples/2
var resultsERP = IncrementalMH(model, samples, {verbose: true, verboseLag: samples/20, burn: burn})

var outputFile = "results/tj2-RSA-so-phi-IncrMH" + samples/1000 +"k_burn" + burn/1000 +"k_prior"+ prior_samples/1000 + 
	"k_burn" + prior_burn/1000 + "k+discBins"+priorBins.length+"a.csv"

var header = "Type,Item,Level,Period,Value"

tjUtils.erpWriter(resultsERP, outputFile, header)
console.log("written to " + outputFile)


