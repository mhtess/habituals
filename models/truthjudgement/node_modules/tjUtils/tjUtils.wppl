var binWidth = 0.75
var minBin = -5
var maxBin = 10
var priorBins = _.range(minBin, maxBin,binWidth)

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};


var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}

var marginalizeERP = function(myERP, label){
    Enumerate(function(){
        var x = sample(myERP)
        return x[label]
    })
}

var dataFrame = function(d, fieldsToNumerify){
    return map(
        function(lst){
            return _.object(map(function(l){
                return _.indexOf(fieldsToNumerify, l[0]) > -1 ? 
                            [l[0], tjUtils.wpParseFloat(l[1])] : l
            },
            _.zip(d[0],lst)
            ))
        },
        d.slice(1))
}

var avoidEnds = function(response){
    return response==0 ? 0.001 : response==1 ? 0.999 : response
}

var gaussianPMF = function(mu, sigma){
  return map(function(b){return Math.exp(gaussianERP.score([mu, sigma], b))}, priorBins)
}

var discretizeLogNormalPrior = function(e, mu, sigma){
  Enumerate(function(){
    return flip(e) ? priorBins[discrete(gaussianPMF(mu, sigma))] : minBin
  })
}


var guessingLink = function(myERP, phi){
    Enumerate(function(){
        var x = flip(1-phi) ? 
                    sample(myERP) :
                    ["habitual","mm"][discrete([0.5,0.5])]
        return x
    })
}

var softmaxSpeaker = function(speakerERP, softmax){
  Enumerate(function(){
      var supp = speakerERP.support()
      var probs = map(function(s){return Math.exp(softmax*speakerERP.score([],s))}, supp)
      var response = supp[discrete(probs)]
      return response
  })
}

var normalize = function(probs){
    return map(function(x){return x/sum(probs)}, probs)
}
