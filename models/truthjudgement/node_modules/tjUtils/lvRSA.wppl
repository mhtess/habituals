
//////// writing prior
// var writeReady = map(function(key){
// 		var m = marginalize(resultsERP, key)
// 		return [key, expectation(marginalize(m, 0)), expectation(marginalize(m, 1))]
// 	},
// 	_.keys(resultsERP.support()[0])
// )
// writeReady.unshift(["key","gamma","delta"])

// asymutils.writeCSV(writeReady, "results/expVal_betas_prior2_incrMH10k.csv")
////////


//////// generics model

// var bins = [0,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
// var bins = [0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,
//          0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99]
var stateBins = [0,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]
var thetaBins = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]

// var thetaBins = priorERP.support()

var thetaPrior = function() {
  var threshold = uniformDraw(thetaBins)//something might go(?) wonky if "generic is false" can never be false
  return threshold
}

var statePrior = function(prior) {
  var state = stateBins[discrete(prior)]
  return state
}

var numberUtterancePrior = function() {

//  var utterances = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99];          
  var utterances = stateBins
  var i = randomInteger(utterances.length)
  return utterances[i]
}

var wordUtterancePrior = function() {
   // var utterances = ["generic is true",
   //                  "generic is false"]
   var utterances = ["generic is true", "mu"]  
  var cost = 1      
  var cst = [1,cost]       
  return utterances[discrete(cst)]

}

var meaning = function(utt,state, theta) {
  return _.isNumber(utt) ? state == utt :
  		   utt=="generic is true"? state>theta :
         utt=="generic is false"? state<=theta :
         utt=="some is true"? state>0 :
         utt=="some is false"? state==0 :
         utt=='mu'? true:
         utt=='some'? state>0:
         utt=='most'? state>= 0.5:
         utt=='all'? state >= 0.99:
         true
}

var listener0 = cache(function(utterance, theta, prior) {
  Enumerate(function(){
  	// console.log('enter listener0')
   //  console.log(prior)
    var state = statePrior(prior)
    // console.log("state " + state)
    // console.log("utt " + utterance)
    // console.log("theta " + theta)
    var m = meaning(utterance, state, theta)
    // console.log(m)
    // console.log(m)
    // console.log(state, utterance, m)
    factor(m?0:-Infinity) 
    return state
  })
})

var speaker1 = cache(function(state, theta, prior) {
  Enumerate(function(){
  	// console.log('enter speaker 1')
  	// console.log(state, theta, domain + ' = domain')
    // console.log(prior)
    var utterance = wordUtterancePrior()
    var L0 = listener0(utterance, theta, prior)
    // console.log(L0.support())
    // console.log(map(function(x){return Math.exp(L0.score(x))},L0.support()))
    factor(L0.score([],state))
    return utterance
  })
})


var listener1 = function(utterance, prior, s1optimality) {
  Enumerate(function(){
  	// console.log('enter listener 1')
   //  console.log(prior)
  	// console.log(utterance)
    var state = statePrior(prior)
    // console.log(state)
    var theta = thetaPrior()
    var S1 = speaker1(state, theta, prior)
    factor(s1optimality*S1.score([],utterance))
    return state
  })
}


var numberSpeaker1 = cache(function(state, theta, prior) {
  Enumerate(function(){
  	// console.log('enter number speaker 1')
  	// console.log(state, theta, domain)

    var utterance = numberUtterancePrior()
    var L0 = listener0(utterance, theta, prior)
    // console.log(map(function(x){return Math.exp(L0.score(x))},L0.support()))
    factor(L0.score([],state))
    return utterance
  })
})

var numberListener1 = function(numberWord, prior, number_s1optimality) {
  Enumerate(function(){
		// console.log('enter number listener 1')
		//   	console.log(domain)

    var state = statePrior(prior)
    // var theta = thetaPrior()
    // console.log(state, domain, theta)
    var S1 = numberSpeaker1(state, 0, prior)
   factor(number_s1optimality*S1.score([],numberWord))
    return state
  })
}

var truthSpeaker2 = function(prevalence, prior, s1optimality, number_s1optimality){
	Enumerate(function(){
    // console.log('prevalence is ' + prevalence)
		// console.log('enter truth speaker2')
    var nL1 = listener0(prevalence, 0, prior)
 		// var nL1 = numberListener1(prevalence, number_s1optimality)
    // console.log('exit number listener1')
		var state = sample(nL1)

		var utterance = wordUtterancePrior()
		var wL1 = listener1(utterance, prior, s1optimality)

		factor(wL1.score([], state))
		return utterance
	})
}


var numberSpeaker2 = function(generic, prior, s1optimality, number_s1optimality){
	Enumerate(function(){
		var numberWord = numberUtterancePrior()
		var utteranceInterpretation = listener1(generic, prior, s1optimality)
		var state = sample(utteranceInterpretation)
		// what would a listener think if I said this number word?
		var nL1 = numberListener1(numberWord, prior, number_s1optimality)
		factor(nL1.score([], state))
		return numberWord
	})
}

// 0.99



// softmaxSpeaker(truthSpeaker2(0.5, [10,1,1,1,1,1,1,1,1,1,1,1], 3, 1), 0)
// listener1("generic is true", [10,1,1,1,1,1,1,1,1,1,1,1], 3)

