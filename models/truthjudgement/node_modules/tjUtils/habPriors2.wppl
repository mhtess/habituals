// time webppl priors-2.wppl --require mht --require habutils

var fpath = "/Users/mht/Documents/research/habituals/models/priors/data/"
var fpath2 = "/Users/mht/Documents/research/habituals/models/truthjudgement/data/"

var existData = mht.readCSV(fpath+"prior2-existence.csv").data
// var waitData = mht.readCSV(fpath+"prior2-logWait.csv").data
var waitData = mht.readCSV(fpath+"prior2-timesper5yr.csv").data

// for expt 2, Figure 2
// var tjData = mht.readCSV(fpath2+"tj-2-logtimes.csv").data
// var df_tj = dataFrame(tjData, ["n_times", "log_times"])

// expt 3, Figure 3
var tjData = mht.readCSV(fpath2+"tj-3.csv").data
var df_tj = dataFrame(tjData, ["n_instances","past_logfreq", "future_logfreq"])

var df_e0 = dataFrame(existData, ["val"])

var df_e = map(function(x){
	return _.extend(x, {
		avoided_endval: avoidEnds(x["val"])
	})
}, df_e0)

var df_w = dataFrame(waitData, ["val", "logval"])

var items = _.uniq(_.pluck(df_e, "item"))
// var items = ["wears socks"]
var genders = _.uniq(_.pluck(df_e, "gender"))

// var prior_samples = 50000
// var prior_burn = prior_samples/2
// var incrOpts = {burn:prior_burn, verbose:false, verboseLag: prior_samples/4}



var questions = ["Q1","Q2"]

var priorModel = function(){

	foreach(items, function(i){

		var itemData_e = subset(df_e, "item", i)
		var itemData_w = subset(df_w, "item", i)

		// foreach(questions, function(q){

			foreach(genders, function(g){

				// if (q=="Q1") {

					var genderData_e = subset(df_e, "gender", g)
					// console.log(genderData_e)

					// % of Americans question
					var gamma = uniform(0,1)
					var delta = uniform(0,50)

					var shape_a = shape_alpha(gamma,delta)
					var shape_b = shape_beta(gamma,delta)

					// console.log(_.pluck(genderData_e, "val").length)

					// var scr = sum(map(function(d){
					// 	return  betaERP.score([shape_a,shape_b], d)
					// }, _.pluck(genderData_e, "val")))


					var scr = reduce(function(d, memo) {
						// console.log(d)
							    return memo + betaERP.score([shape_a,shape_b], d)
								}, 0, _.pluck(genderData_e, "avoided_endval"))

					// console.log(_.pluck(genderData_e, "val"))
					
					factor(scr)

					// console.log("q1" + scr)

					var predictiveExistence = beta(shape_a, shape_b)

					query.add([i,g,"Q1"], predictiveExistence)

				// } else {

					var genderData_w = subset(df_w, "gender", g)
					// console.log(genderData_w)

					var mu = uniform(0,10)
					var sigma = uniform(0,10)

					var scr2 = sum(map(function(d){
						return gaussianERP.score([mu, sigma], d)
					}, _.pluck(genderData_w, "logval")))

					factor(scr2)
					// console.log("q2" + scr2)

					query.add([i,g,"Q2"], [mu, sigma])

				// }

			})

		// })

	})			
	return query
}



